<?php
/**
 * CFLinkRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cashfree\Client\Model;

use \ArrayAccess;
use \cashfree\Client\ObjectSerializer;

/**
 * CFLinkRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CFLinkRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CFLinkRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'link_id' => 'string',
        'link_amount' => 'double',
        'link_currency' => 'string',
        'link_purpose' => 'string',
        'customer_details' => '\cashfree\Client\Model\CFLinkCustomerDetailsEntity',
        'link_partial_payments' => 'bool',
        'link_minimum_partial_amount' => 'double',
        'link_expiry_time' => 'string',
        'link_notify' => '\cashfree\Client\Model\CFLinkNotifyEntity',
        'link_auto_reminders' => 'bool',
        'link_notes' => 'array<string,string>',
        'link_meta' => '\cashfree\Client\Model\CFLinkMetaEntity'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'link_id' => null,
        'link_amount' => 'double',
        'link_currency' => null,
        'link_purpose' => null,
        'customer_details' => null,
        'link_partial_payments' => null,
        'link_minimum_partial_amount' => 'double',
        'link_expiry_time' => null,
        'link_notify' => null,
        'link_auto_reminders' => null,
        'link_notes' => null,
        'link_meta' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'link_id' => 'link_id',
        'link_amount' => 'link_amount',
        'link_currency' => 'link_currency',
        'link_purpose' => 'link_purpose',
        'customer_details' => 'customer_details',
        'link_partial_payments' => 'link_partial_payments',
        'link_minimum_partial_amount' => 'link_minimum_partial_amount',
        'link_expiry_time' => 'link_expiry_time',
        'link_notify' => 'link_notify',
        'link_auto_reminders' => 'link_auto_reminders',
        'link_notes' => 'link_notes',
        'link_meta' => 'link_meta'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'link_id' => 'setLinkId',
        'link_amount' => 'setLinkAmount',
        'link_currency' => 'setLinkCurrency',
        'link_purpose' => 'setLinkPurpose',
        'customer_details' => 'setCustomerDetails',
        'link_partial_payments' => 'setLinkPartialPayments',
        'link_minimum_partial_amount' => 'setLinkMinimumPartialAmount',
        'link_expiry_time' => 'setLinkExpiryTime',
        'link_notify' => 'setLinkNotify',
        'link_auto_reminders' => 'setLinkAutoReminders',
        'link_notes' => 'setLinkNotes',
        'link_meta' => 'setLinkMeta'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'link_id' => 'getLinkId',
        'link_amount' => 'getLinkAmount',
        'link_currency' => 'getLinkCurrency',
        'link_purpose' => 'getLinkPurpose',
        'customer_details' => 'getCustomerDetails',
        'link_partial_payments' => 'getLinkPartialPayments',
        'link_minimum_partial_amount' => 'getLinkMinimumPartialAmount',
        'link_expiry_time' => 'getLinkExpiryTime',
        'link_notify' => 'getLinkNotify',
        'link_auto_reminders' => 'getLinkAutoReminders',
        'link_notes' => 'getLinkNotes',
        'link_meta' => 'getLinkMeta'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['link_id'] = $data['link_id'] ?? null;
        $this->container['link_amount'] = $data['link_amount'] ?? null;
        $this->container['link_currency'] = $data['link_currency'] ?? null;
        $this->container['link_purpose'] = $data['link_purpose'] ?? null;
        $this->container['customer_details'] = $data['customer_details'] ?? null;
        $this->container['link_partial_payments'] = $data['link_partial_payments'] ?? null;
        $this->container['link_minimum_partial_amount'] = $data['link_minimum_partial_amount'] ?? null;
        $this->container['link_expiry_time'] = $data['link_expiry_time'] ?? null;
        $this->container['link_notify'] = $data['link_notify'] ?? null;
        $this->container['link_auto_reminders'] = $data['link_auto_reminders'] ?? null;
        $this->container['link_notes'] = $data['link_notes'] ?? null;
        $this->container['link_meta'] = $data['link_meta'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['link_id'] === null) {
            $invalidProperties[] = "'link_id' can't be null";
        }
        if ((mb_strlen($this->container['link_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'link_id', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['link_amount'] === null) {
            $invalidProperties[] = "'link_amount' can't be null";
        }
        if ($this->container['link_currency'] === null) {
            $invalidProperties[] = "'link_currency' can't be null";
        }
        if ((mb_strlen($this->container['link_currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'link_currency', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['link_currency']) < 3)) {
            $invalidProperties[] = "invalid value for 'link_currency', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['link_purpose'] === null) {
            $invalidProperties[] = "'link_purpose' can't be null";
        }
        if ((mb_strlen($this->container['link_purpose']) > 500)) {
            $invalidProperties[] = "invalid value for 'link_purpose', the character length must be smaller than or equal to 500.";
        }

        if ($this->container['customer_details'] === null) {
            $invalidProperties[] = "'customer_details' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets link_id
     *
     * @return string
     */
    public function getLinkId()
    {
        return $this->container['link_id'];
    }

    /**
     * Sets link_id
     *
     * @param string $link_id Unique Identifier (provided by merchant) for the Link. Alphanumeric and only - and _ allowed (50 character limit). Use this for other link-related APIs.
     *
     * @return self
     */
    public function setLinkId($link_id)
    {
        if ((mb_strlen($link_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $link_id when calling CFLinkRequest., must be smaller than or equal to 50.');
        }

        $this->container['link_id'] = $link_id;

        return $this;
    }

    /**
     * Gets link_amount
     *
     * @return double
     */
    public function getLinkAmount()
    {
        return $this->container['link_amount'];
    }

    /**
     * Sets link_amount
     *
     * @param double $link_amount Amount to be collected using this link. Provide upto two decimals for paise.
     *
     * @return self
     */
    public function setLinkAmount($link_amount)
    {
        $this->container['link_amount'] = $link_amount;

        return $this;
    }

    /**
     * Gets link_currency
     *
     * @return string
     */
    public function getLinkCurrency()
    {
        return $this->container['link_currency'];
    }

    /**
     * Sets link_currency
     *
     * @param string $link_currency Currency for the payment link. Default is INR. Contact care@cashfree.com to enable new currencies.
     *
     * @return self
     */
    public function setLinkCurrency($link_currency)
    {
        if ((mb_strlen($link_currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $link_currency when calling CFLinkRequest., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($link_currency) < 3)) {
            throw new \InvalidArgumentException('invalid length for $link_currency when calling CFLinkRequest., must be bigger than or equal to 3.');
        }

        $this->container['link_currency'] = $link_currency;

        return $this;
    }

    /**
     * Gets link_purpose
     *
     * @return string
     */
    public function getLinkPurpose()
    {
        return $this->container['link_purpose'];
    }

    /**
     * Sets link_purpose
     *
     * @param string $link_purpose A brief description for which payment must be collected. This is shown to the customer.
     *
     * @return self
     */
    public function setLinkPurpose($link_purpose)
    {
        if ((mb_strlen($link_purpose) > 500)) {
            throw new \InvalidArgumentException('invalid length for $link_purpose when calling CFLinkRequest., must be smaller than or equal to 500.');
        }

        $this->container['link_purpose'] = $link_purpose;

        return $this;
    }

    /**
     * Gets customer_details
     *
     * @return \cashfree\Client\Model\CFLinkCustomerDetailsEntity
     */
    public function getCustomerDetails()
    {
        return $this->container['customer_details'];
    }

    /**
     * Sets customer_details
     *
     * @param \cashfree\Client\Model\CFLinkCustomerDetailsEntity $customer_details customer_details
     *
     * @return self
     */
    public function setCustomerDetails($customer_details)
    {
        $this->container['customer_details'] = $customer_details;

        return $this;
    }

    /**
     * Gets link_partial_payments
     *
     * @return bool|null
     */
    public function getLinkPartialPayments()
    {
        return $this->container['link_partial_payments'];
    }

    /**
     * Sets link_partial_payments
     *
     * @param bool|null $link_partial_payments If \"true\", customer can make partial payments for the link.
     *
     * @return self
     */
    public function setLinkPartialPayments($link_partial_payments)
    {
        $this->container['link_partial_payments'] = $link_partial_payments;

        return $this;
    }

    /**
     * Gets link_minimum_partial_amount
     *
     * @return double|null
     */
    public function getLinkMinimumPartialAmount()
    {
        return $this->container['link_minimum_partial_amount'];
    }

    /**
     * Sets link_minimum_partial_amount
     *
     * @param double|null $link_minimum_partial_amount Minimum amount in first installment that needs to be paid by the customer if partial payments are enabled. This should be less than the link_amount.
     *
     * @return self
     */
    public function setLinkMinimumPartialAmount($link_minimum_partial_amount)
    {
        $this->container['link_minimum_partial_amount'] = $link_minimum_partial_amount;

        return $this;
    }

    /**
     * Gets link_expiry_time
     *
     * @return string|null
     */
    public function getLinkExpiryTime()
    {
        return $this->container['link_expiry_time'];
    }

    /**
     * Sets link_expiry_time
     *
     * @param string|null $link_expiry_time Time after which the link expires. Customers will not be able to make the payment beyond the time specified here. You can provide them in a valid ISO 8601 time format. Default is 30 days.
     *
     * @return self
     */
    public function setLinkExpiryTime($link_expiry_time)
    {
        $this->container['link_expiry_time'] = $link_expiry_time;

        return $this;
    }

    /**
     * Gets link_notify
     *
     * @return \cashfree\Client\Model\CFLinkNotifyEntity|null
     */
    public function getLinkNotify()
    {
        return $this->container['link_notify'];
    }

    /**
     * Sets link_notify
     *
     * @param \cashfree\Client\Model\CFLinkNotifyEntity|null $link_notify link_notify
     *
     * @return self
     */
    public function setLinkNotify($link_notify)
    {
        $this->container['link_notify'] = $link_notify;

        return $this;
    }

    /**
     * Gets link_auto_reminders
     *
     * @return bool|null
     */
    public function getLinkAutoReminders()
    {
        return $this->container['link_auto_reminders'];
    }

    /**
     * Sets link_auto_reminders
     *
     * @param bool|null $link_auto_reminders If \"true\", reminders will be sent to customers for collecting payments.
     *
     * @return self
     */
    public function setLinkAutoReminders($link_auto_reminders)
    {
        $this->container['link_auto_reminders'] = $link_auto_reminders;

        return $this;
    }

    /**
     * Gets link_notes
     *
     * @return array<string,string>|null
     */
    public function getLinkNotes()
    {
        return $this->container['link_notes'];
    }

    /**
     * Sets link_notes
     *
     * @param array<string,string>|null $link_notes Key-value pair that can be used to store additional information about the entity. Maximum 5 key-value pairs
     *
     * @return self
     */
    public function setLinkNotes($link_notes)
    {
        $this->container['link_notes'] = $link_notes;

        return $this;
    }

    /**
     * Gets link_meta
     *
     * @return \cashfree\Client\Model\CFLinkMetaEntity|null
     */
    public function getLinkMeta()
    {
        return $this->container['link_meta'];
    }

    /**
     * Sets link_meta
     *
     * @param \cashfree\Client\Model\CFLinkMetaEntity|null $link_meta link_meta
     *
     * @return self
     */
    public function setLinkMeta($link_meta)
    {
        $this->container['link_meta'] = $link_meta;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


