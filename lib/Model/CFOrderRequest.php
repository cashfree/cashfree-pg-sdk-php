<?php
/**
 * CFOrderRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cashfree\Client\Model;

use \ArrayAccess;
use \cashfree\Client\ObjectSerializer;

/**
 * CFOrderRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CFOrderRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CFOrderRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_id' => 'string',
        'order_amount' => 'double',
        'order_currency' => 'string',
        'customer_details' => '\cashfree\Client\Model\CFCustomerDetails',
        'order_meta' => '\cashfree\Client\Model\CFOrderMeta',
        'order_expiry_time' => 'string',
        'order_note' => 'string',
        'order_tags' => 'array<string,string>',
        'order_splits' => '\cashfree\Client\Model\CFVendorSplit[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_id' => null,
        'order_amount' => 'double',
        'order_currency' => null,
        'customer_details' => null,
        'order_meta' => null,
        'order_expiry_time' => null,
        'order_note' => null,
        'order_tags' => null,
        'order_splits' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'order_id',
        'order_amount' => 'order_amount',
        'order_currency' => 'order_currency',
        'customer_details' => 'customer_details',
        'order_meta' => 'order_meta',
        'order_expiry_time' => 'order_expiry_time',
        'order_note' => 'order_note',
        'order_tags' => 'order_tags',
        'order_splits' => 'order_splits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'order_amount' => 'setOrderAmount',
        'order_currency' => 'setOrderCurrency',
        'customer_details' => 'setCustomerDetails',
        'order_meta' => 'setOrderMeta',
        'order_expiry_time' => 'setOrderExpiryTime',
        'order_note' => 'setOrderNote',
        'order_tags' => 'setOrderTags',
        'order_splits' => 'setOrderSplits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'order_amount' => 'getOrderAmount',
        'order_currency' => 'getOrderCurrency',
        'customer_details' => 'getCustomerDetails',
        'order_meta' => 'getOrderMeta',
        'order_expiry_time' => 'getOrderExpiryTime',
        'order_note' => 'getOrderNote',
        'order_tags' => 'getOrderTags',
        'order_splits' => 'getOrderSplits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = $data['order_id'] ?? null;
        $this->container['order_amount'] = $data['order_amount'] ?? null;
        $this->container['order_currency'] = $data['order_currency'] ?? null;
        $this->container['customer_details'] = $data['customer_details'] ?? null;
        $this->container['order_meta'] = $data['order_meta'] ?? null;
        $this->container['order_expiry_time'] = $data['order_expiry_time'] ?? null;
        $this->container['order_note'] = $data['order_note'] ?? null;
        $this->container['order_tags'] = $data['order_tags'] ?? null;
        $this->container['order_splits'] = $data['order_splits'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['order_id']) && (mb_strlen($this->container['order_id']) > 45)) {
            $invalidProperties[] = "invalid value for 'order_id', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['order_id']) && (mb_strlen($this->container['order_id']) < 3)) {
            $invalidProperties[] = "invalid value for 'order_id', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['order_amount'] === null) {
            $invalidProperties[] = "'order_amount' can't be null";
        }
        if ($this->container['order_currency'] === null) {
            $invalidProperties[] = "'order_currency' can't be null";
        }
        if ($this->container['customer_details'] === null) {
            $invalidProperties[] = "'customer_details' can't be null";
        }
        if (!is_null($this->container['order_note']) && (mb_strlen($this->container['order_note']) > 200)) {
            $invalidProperties[] = "invalid value for 'order_note', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['order_note']) && (mb_strlen($this->container['order_note']) < 3)) {
            $invalidProperties[] = "invalid value for 'order_note', the character length must be bigger than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id Order identifier present in your system. Alphanumeric and only - and _ allowed.
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (!is_null($order_id) && (mb_strlen($order_id) > 45)) {
            throw new \InvalidArgumentException('invalid length for $order_id when calling CFOrderRequest., must be smaller than or equal to 45.');
        }
        if (!is_null($order_id) && (mb_strlen($order_id) < 3)) {
            throw new \InvalidArgumentException('invalid length for $order_id when calling CFOrderRequest., must be bigger than or equal to 3.');
        }

        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_amount
     *
     * @return double
     */
    public function getOrderAmount()
    {
        return $this->container['order_amount'];
    }

    /**
     * Sets order_amount
     *
     * @param double $order_amount Bill amount for the order. Provide upto two decimals. 10.15 means Rs 10 and 15 paisa
     *
     * @return self
     */
    public function setOrderAmount($order_amount)
    {
        $this->container['order_amount'] = $order_amount;

        return $this;
    }

    /**
     * Gets order_currency
     *
     * @return string
     */
    public function getOrderCurrency()
    {
        return $this->container['order_currency'];
    }

    /**
     * Sets order_currency
     *
     * @param string $order_currency Currency for the order. INR if left empty. Contact care@cashfree.com to enable new currencies.
     *
     * @return self
     */
    public function setOrderCurrency($order_currency)
    {
        $this->container['order_currency'] = $order_currency;

        return $this;
    }

    /**
     * Gets customer_details
     *
     * @return \cashfree\Client\Model\CFCustomerDetails
     */
    public function getCustomerDetails()
    {
        return $this->container['customer_details'];
    }

    /**
     * Sets customer_details
     *
     * @param \cashfree\Client\Model\CFCustomerDetails $customer_details customer_details
     *
     * @return self
     */
    public function setCustomerDetails($customer_details)
    {
        $this->container['customer_details'] = $customer_details;

        return $this;
    }

    /**
     * Gets order_meta
     *
     * @return \cashfree\Client\Model\CFOrderMeta|null
     */
    public function getOrderMeta()
    {
        return $this->container['order_meta'];
    }

    /**
     * Sets order_meta
     *
     * @param \cashfree\Client\Model\CFOrderMeta|null $order_meta order_meta
     *
     * @return self
     */
    public function setOrderMeta($order_meta)
    {
        $this->container['order_meta'] = $order_meta;

        return $this;
    }

    /**
     * Gets order_expiry_time
     *
     * @return string|null
     */
    public function getOrderExpiryTime()
    {
        return $this->container['order_expiry_time'];
    }

    /**
     * Sets order_expiry_time
     *
     * @param string|null $order_expiry_time Time after which the order expires. Customers will not be able to make the payment beyond the time specified here. We store timestamps in IST, but you can provide them in a valid ISO 8601 time format.
     *
     * @return self
     */
    public function setOrderExpiryTime($order_expiry_time)
    {
        $this->container['order_expiry_time'] = $order_expiry_time;

        return $this;
    }

    /**
     * Gets order_note
     *
     * @return string|null
     */
    public function getOrderNote()
    {
        return $this->container['order_note'];
    }

    /**
     * Sets order_note
     *
     * @param string|null $order_note Order note for reference.
     *
     * @return self
     */
    public function setOrderNote($order_note)
    {
        if (!is_null($order_note) && (mb_strlen($order_note) > 200)) {
            throw new \InvalidArgumentException('invalid length for $order_note when calling CFOrderRequest., must be smaller than or equal to 200.');
        }
        if (!is_null($order_note) && (mb_strlen($order_note) < 3)) {
            throw new \InvalidArgumentException('invalid length for $order_note when calling CFOrderRequest., must be bigger than or equal to 3.');
        }

        $this->container['order_note'] = $order_note;

        return $this;
    }

    /**
     * Gets order_tags
     *
     * @return array<string,string>|null
     */
    public function getOrderTags()
    {
        return $this->container['order_tags'];
    }

    /**
     * Sets order_tags
     *
     * @param array<string,string>|null $order_tags Custom Tags which can be passed for an order. A maximum of 6 tags can be added
     *
     * @return self
     */
    public function setOrderTags($order_tags)
    {
        $this->container['order_tags'] = $order_tags;

        return $this;
    }

    /**
     * Gets order_splits
     *
     * @return \cashfree\Client\Model\CFVendorSplit[]|null
     */
    public function getOrderSplits()
    {
        return $this->container['order_splits'];
    }

    /**
     * Sets order_splits
     *
     * @param \cashfree\Client\Model\CFVendorSplit[]|null $order_splits order_splits
     *
     * @return self
     */
    public function setOrderSplits($order_splits)
    {
        $this->container['order_splits'] = $order_splits;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


