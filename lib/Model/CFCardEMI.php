<?php
/**
 * CFCardEMI
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cashfree\Client\Model;

use \ArrayAccess;
use \cashfree\Client\ObjectSerializer;

/**
 * CFCardEMI Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CFCardEMI implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CFCardEMI';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channel' => 'string',
        'card_number' => 'string',
        'card_holder_name' => 'string',
        'card_expiry_mm' => 'string',
        'card_expiry_yy' => 'string',
        'card_cvv' => 'string',
        'card_alias' => 'string',
        'card_bank_name' => 'string',
        'emi_tenure' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channel' => null,
        'card_number' => null,
        'card_holder_name' => null,
        'card_expiry_mm' => null,
        'card_expiry_yy' => null,
        'card_cvv' => null,
        'card_alias' => null,
        'card_bank_name' => null,
        'emi_tenure' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel' => 'channel',
        'card_number' => 'card_number',
        'card_holder_name' => 'card_holder_name',
        'card_expiry_mm' => 'card_expiry_mm',
        'card_expiry_yy' => 'card_expiry_yy',
        'card_cvv' => 'card_cvv',
        'card_alias' => 'card_alias',
        'card_bank_name' => 'card_bank_name',
        'emi_tenure' => 'emi_tenure'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel' => 'setChannel',
        'card_number' => 'setCardNumber',
        'card_holder_name' => 'setCardHolderName',
        'card_expiry_mm' => 'setCardExpiryMm',
        'card_expiry_yy' => 'setCardExpiryYy',
        'card_cvv' => 'setCardCvv',
        'card_alias' => 'setCardAlias',
        'card_bank_name' => 'setCardBankName',
        'emi_tenure' => 'setEmiTenure'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel' => 'getChannel',
        'card_number' => 'getCardNumber',
        'card_holder_name' => 'getCardHolderName',
        'card_expiry_mm' => 'getCardExpiryMm',
        'card_expiry_yy' => 'getCardExpiryYy',
        'card_cvv' => 'getCardCvv',
        'card_alias' => 'getCardAlias',
        'card_bank_name' => 'getCardBankName',
        'emi_tenure' => 'getEmiTenure'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CHANNEL_LINK = 'link';
    const CARD_BANK_NAME_KOTAK = 'Kotak';
    const CARD_BANK_NAME_ICICI = 'ICICI';
    const CARD_BANK_NAME_RBL = 'RBL';
    const CARD_BANK_NAME_BOB = 'BOB';
    const CARD_BANK_NAME_STANDARD_CHARTERED = 'Standard Chartered';
    const CARD_BANK_NAME_HDFC = 'HDFC';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelAllowableValues()
    {
        return [
            self::CHANNEL_LINK,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardBankNameAllowableValues()
    {
        return [
            self::CARD_BANK_NAME_KOTAK,
            self::CARD_BANK_NAME_ICICI,
            self::CARD_BANK_NAME_RBL,
            self::CARD_BANK_NAME_BOB,
            self::CARD_BANK_NAME_STANDARD_CHARTERED,
            self::CARD_BANK_NAME_HDFC,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel'] = $data['channel'] ?? 'link';
        $this->container['card_number'] = $data['card_number'] ?? null;
        $this->container['card_holder_name'] = $data['card_holder_name'] ?? null;
        $this->container['card_expiry_mm'] = $data['card_expiry_mm'] ?? null;
        $this->container['card_expiry_yy'] = $data['card_expiry_yy'] ?? null;
        $this->container['card_cvv'] = $data['card_cvv'] ?? null;
        $this->container['card_alias'] = $data['card_alias'] ?? null;
        $this->container['card_bank_name'] = $data['card_bank_name'] ?? null;
        $this->container['emi_tenure'] = $data['emi_tenure'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['channel'] === null) {
            $invalidProperties[] = "'channel' can't be null";
        }
        $allowedValues = $this->getChannelAllowableValues();
        if (!is_null($this->container['channel']) && !in_array($this->container['channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'channel', must be one of '%s'",
                $this->container['channel'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['card_number'] === null) {
            $invalidProperties[] = "'card_number' can't be null";
        }
        if ($this->container['card_expiry_mm'] === null) {
            $invalidProperties[] = "'card_expiry_mm' can't be null";
        }
        if ($this->container['card_expiry_yy'] === null) {
            $invalidProperties[] = "'card_expiry_yy' can't be null";
        }
        if ($this->container['card_cvv'] === null) {
            $invalidProperties[] = "'card_cvv' can't be null";
        }
        if ($this->container['card_bank_name'] === null) {
            $invalidProperties[] = "'card_bank_name' can't be null";
        }
        $allowedValues = $this->getCardBankNameAllowableValues();
        if (!is_null($this->container['card_bank_name']) && !in_array($this->container['card_bank_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'card_bank_name', must be one of '%s'",
                $this->container['card_bank_name'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['emi_tenure'] === null) {
            $invalidProperties[] = "'emi_tenure' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel The channel for card payments will always be \"link\"
     *
     * @return self
     */
    public function setChannel($channel)
    {
        $allowedValues = $this->getChannelAllowableValues();
        if (!in_array($channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'channel', must be one of '%s'",
                    $channel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string $card_number Customer card number.
     *
     * @return self
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets card_holder_name
     *
     * @return string|null
     */
    public function getCardHolderName()
    {
        return $this->container['card_holder_name'];
    }

    /**
     * Sets card_holder_name
     *
     * @param string|null $card_holder_name Customer name mentioned on the card.
     *
     * @return self
     */
    public function setCardHolderName($card_holder_name)
    {
        $this->container['card_holder_name'] = $card_holder_name;

        return $this;
    }

    /**
     * Gets card_expiry_mm
     *
     * @return string
     */
    public function getCardExpiryMm()
    {
        return $this->container['card_expiry_mm'];
    }

    /**
     * Sets card_expiry_mm
     *
     * @param string $card_expiry_mm Card expiry month.
     *
     * @return self
     */
    public function setCardExpiryMm($card_expiry_mm)
    {
        $this->container['card_expiry_mm'] = $card_expiry_mm;

        return $this;
    }

    /**
     * Gets card_expiry_yy
     *
     * @return string
     */
    public function getCardExpiryYy()
    {
        return $this->container['card_expiry_yy'];
    }

    /**
     * Sets card_expiry_yy
     *
     * @param string $card_expiry_yy Card expiry year.
     *
     * @return self
     */
    public function setCardExpiryYy($card_expiry_yy)
    {
        $this->container['card_expiry_yy'] = $card_expiry_yy;

        return $this;
    }

    /**
     * Gets card_cvv
     *
     * @return string
     */
    public function getCardCvv()
    {
        return $this->container['card_cvv'];
    }

    /**
     * Sets card_cvv
     *
     * @param string $card_cvv CVV mentioned on the card.
     *
     * @return self
     */
    public function setCardCvv($card_cvv)
    {
        $this->container['card_cvv'] = $card_cvv;

        return $this;
    }

    /**
     * Gets card_alias
     *
     * @return string|null
     */
    public function getCardAlias()
    {
        return $this->container['card_alias'];
    }

    /**
     * Sets card_alias
     *
     * @param string|null $card_alias Card alias as returned by Cashfree Vault API
     *
     * @return self
     */
    public function setCardAlias($card_alias)
    {
        $this->container['card_alias'] = $card_alias;

        return $this;
    }

    /**
     * Gets card_bank_name
     *
     * @return string
     */
    public function getCardBankName()
    {
        return $this->container['card_bank_name'];
    }

    /**
     * Sets card_bank_name
     *
     * @param string $card_bank_name Card bank name, required for EMI payments. This is the bank user has selected for EMI. One of [\"Kotak\", \"ICICI\", \"RBL\", \"BOB\", \"Standard Chartered\", \"HDFC\"]
     *
     * @return self
     */
    public function setCardBankName($card_bank_name)
    {
        $allowedValues = $this->getCardBankNameAllowableValues();
        if (!in_array($card_bank_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'card_bank_name', must be one of '%s'",
                    $card_bank_name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_bank_name'] = $card_bank_name;

        return $this;
    }

    /**
     * Gets emi_tenure
     *
     * @return int
     */
    public function getEmiTenure()
    {
        return $this->container['emi_tenure'];
    }

    /**
     * Sets emi_tenure
     *
     * @param int $emi_tenure EMI tenure selected by the user
     *
     * @return self
     */
    public function setEmiTenure($emi_tenure)
    {
        $this->container['emi_tenure'] = $emi_tenure;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


