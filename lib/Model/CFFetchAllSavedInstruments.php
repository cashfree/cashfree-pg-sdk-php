<?php
/**
 * CFFetchAllSavedInstruments
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cashfree\Client\Model;

use \ArrayAccess;
use \cashfree\Client\ObjectSerializer;

/**
 * CFFetchAllSavedInstruments Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CFFetchAllSavedInstruments implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CFFetchAllSavedInstruments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer_id' => 'string',
        'afa_reference' => 'int',
        'instrument_id' => 'string',
        'instrument_type' => 'string',
        'instrument_uid' => 'string',
        'instrument_display' => 'string',
        'instrument_status' => 'string',
        'created_at' => 'string',
        'instrument_meta' => '\cashfree\Client\Model\CFSavedInstrumentMeta'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer_id' => null,
        'afa_reference' => null,
        'instrument_id' => null,
        'instrument_type' => null,
        'instrument_uid' => null,
        'instrument_display' => null,
        'instrument_status' => null,
        'created_at' => null,
        'instrument_meta' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_id' => 'customer_id',
        'afa_reference' => 'afa_reference',
        'instrument_id' => 'instrument_id',
        'instrument_type' => 'instrument_type',
        'instrument_uid' => 'instrument_uid',
        'instrument_display' => 'instrument_display',
        'instrument_status' => 'instrument_status',
        'created_at' => 'created_at',
        'instrument_meta' => 'instrument_meta'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_id' => 'setCustomerId',
        'afa_reference' => 'setAfaReference',
        'instrument_id' => 'setInstrumentId',
        'instrument_type' => 'setInstrumentType',
        'instrument_uid' => 'setInstrumentUid',
        'instrument_display' => 'setInstrumentDisplay',
        'instrument_status' => 'setInstrumentStatus',
        'created_at' => 'setCreatedAt',
        'instrument_meta' => 'setInstrumentMeta'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_id' => 'getCustomerId',
        'afa_reference' => 'getAfaReference',
        'instrument_id' => 'getInstrumentId',
        'instrument_type' => 'getInstrumentType',
        'instrument_uid' => 'getInstrumentUid',
        'instrument_display' => 'getInstrumentDisplay',
        'instrument_status' => 'getInstrumentStatus',
        'created_at' => 'getCreatedAt',
        'instrument_meta' => 'getInstrumentMeta'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const INSTRUMENT_TYPE_CARD = 'card';
    const INSTRUMENT_STATUS_ACTIVE = 'ACTIVE';
    const INSTRUMENT_STATUS_INACTIVE = 'INACTIVE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInstrumentTypeAllowableValues()
    {
        return [
            self::INSTRUMENT_TYPE_CARD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInstrumentStatusAllowableValues()
    {
        return [
            self::INSTRUMENT_STATUS_ACTIVE,
            self::INSTRUMENT_STATUS_INACTIVE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_id'] = $data['customer_id'] ?? null;
        $this->container['afa_reference'] = $data['afa_reference'] ?? null;
        $this->container['instrument_id'] = $data['instrument_id'] ?? null;
        $this->container['instrument_type'] = $data['instrument_type'] ?? null;
        $this->container['instrument_uid'] = $data['instrument_uid'] ?? null;
        $this->container['instrument_display'] = $data['instrument_display'] ?? null;
        $this->container['instrument_status'] = $data['instrument_status'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['instrument_meta'] = $data['instrument_meta'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInstrumentTypeAllowableValues();
        if (!is_null($this->container['instrument_type']) && !in_array($this->container['instrument_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'instrument_type', must be one of '%s'",
                $this->container['instrument_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInstrumentStatusAllowableValues();
        if (!is_null($this->container['instrument_status']) && !in_array($this->container['instrument_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'instrument_status', must be one of '%s'",
                $this->container['instrument_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id customer_id for which the instrument was saved
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets afa_reference
     *
     * @return int|null
     */
    public function getAfaReference()
    {
        return $this->container['afa_reference'];
    }

    /**
     * Sets afa_reference
     *
     * @param int|null $afa_reference cf_payment_id of the successful transaction done while saving instrument
     *
     * @return self
     */
    public function setAfaReference($afa_reference)
    {
        $this->container['afa_reference'] = $afa_reference;

        return $this;
    }

    /**
     * Gets instrument_id
     *
     * @return string|null
     */
    public function getInstrumentId()
    {
        return $this->container['instrument_id'];
    }

    /**
     * Sets instrument_id
     *
     * @param string|null $instrument_id saved instrument id
     *
     * @return self
     */
    public function setInstrumentId($instrument_id)
    {
        $this->container['instrument_id'] = $instrument_id;

        return $this;
    }

    /**
     * Gets instrument_type
     *
     * @return string|null
     */
    public function getInstrumentType()
    {
        return $this->container['instrument_type'];
    }

    /**
     * Sets instrument_type
     *
     * @param string|null $instrument_type Type of the saved instrument
     *
     * @return self
     */
    public function setInstrumentType($instrument_type)
    {
        $allowedValues = $this->getInstrumentTypeAllowableValues();
        if (!is_null($instrument_type) && !in_array($instrument_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'instrument_type', must be one of '%s'",
                    $instrument_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['instrument_type'] = $instrument_type;

        return $this;
    }

    /**
     * Gets instrument_uid
     *
     * @return string|null
     */
    public function getInstrumentUid()
    {
        return $this->container['instrument_uid'];
    }

    /**
     * Sets instrument_uid
     *
     * @param string|null $instrument_uid Unique id for the saved instrument
     *
     * @return self
     */
    public function setInstrumentUid($instrument_uid)
    {
        $this->container['instrument_uid'] = $instrument_uid;

        return $this;
    }

    /**
     * Gets instrument_display
     *
     * @return string|null
     */
    public function getInstrumentDisplay()
    {
        return $this->container['instrument_display'];
    }

    /**
     * Sets instrument_display
     *
     * @param string|null $instrument_display masked card number displayed to the customer
     *
     * @return self
     */
    public function setInstrumentDisplay($instrument_display)
    {
        $this->container['instrument_display'] = $instrument_display;

        return $this;
    }

    /**
     * Gets instrument_status
     *
     * @return string|null
     */
    public function getInstrumentStatus()
    {
        return $this->container['instrument_status'];
    }

    /**
     * Sets instrument_status
     *
     * @param string|null $instrument_status status of the saved instrument
     *
     * @return self
     */
    public function setInstrumentStatus($instrument_status)
    {
        $allowedValues = $this->getInstrumentStatusAllowableValues();
        if (!is_null($instrument_status) && !in_array($instrument_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'instrument_status', must be one of '%s'",
                    $instrument_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['instrument_status'] = $instrument_status;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at timestamp at which instrument was saved
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets instrument_meta
     *
     * @return \cashfree\Client\Model\CFSavedInstrumentMeta|null
     */
    public function getInstrumentMeta()
    {
        return $this->container['instrument_meta'];
    }

    /**
     * Sets instrument_meta
     *
     * @param \cashfree\Client\Model\CFSavedInstrumentMeta|null $instrument_meta instrument_meta
     *
     * @return self
     */
    public function setInstrumentMeta($instrument_meta)
    {
        $this->container['instrument_meta'] = $instrument_meta;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


