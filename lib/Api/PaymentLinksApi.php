<?php
/**
 * PaymentLinksApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cashfree\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use cashfree\Client\ApiException;
use cashfree\Client\Configuration;
use cashfree\Client\HeaderSelector;
use cashfree\Client\ObjectSerializer;
use cashfree\Client\Model\CFLink;
use cashfree\Client\Model\CFLinkCancelledResponse;

class CFPaymentLinkCancelledResponse {
    public CFLinkCancelledResponse $cfLinkCancelledResponse;
    public mixed $headers;

    public function __construct(CFLinkCancelledResponse $cfLinkCancelledResponse, mixed $headers) {
        if($cfLinkCancelledResponse != null) {
            $this->cfLinkCancelledResponse = $cfLinkCancelledResponse;
        }
        if($headers != null) {
            $this->headers = $headers;
        }
    }

    public function getCFLinkCancelledResponse() {
        return $this->cfLinkCancelledResponse;
    }
    public function getHeader() {
        return $this->headers;
    }
}

class CFPaymentLinkResponse {
    public CFLink $cfLink;
    public mixed $headers;

    public function __construct(CFLink $cfLink, mixed $headers) {
        if($cfLink != null) {
            $this->cfLink = $cfLink;
        }
        if($headers != null) {
            $this->headers = $headers;
        }
    }

    public function getCFLink() {
        return $this->cfLink;
    }
    public function getHeader() {
        return $this->headers;
    }
}

/**
 * PaymentLinksApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentLinksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelPaymentLink
     *
     * Cancel Payment Link
     *
     * @param  string $x_client_id x_client_id (required)
     * @param  string $x_client_secret x_client_secret (required)
     * @param  string $link_id link_id (required)
     * @param  string $x_api_version x_api_version (optional, default to '2022-01-01')
     *
     * @throws \cashfree\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cashfree\Client\Api\CFPaymentLinkCancelledResponse|\cashfree\Client\Model\LinkCancelledError
     */
    public function cancelPaymentLink($x_client_id, $x_client_secret, $link_id, $x_api_version = '2022-01-01')
    {
        $response = $this->cancelPaymentLinkWithHttpInfo($x_client_id, $x_client_secret, $link_id, $x_api_version);
        list($r) = $response;
        $cfPaymentLinkCancelledResponse = new CFPaymentLinkCancelledResponse($r, $response[2]);
        return $cfPaymentLinkCancelledResponse;
    }

    /**
     * Operation cancelPaymentLinkWithHttpInfo
     *
     * Cancel Payment Link
     *
     * @param  string $x_client_id (required)
     * @param  string $x_client_secret (required)
     * @param  string $link_id (required)
     * @param  string $x_api_version (optional, default to '2022-01-01')
     *
     * @throws \cashfree\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cashfree\Client\Model\CFLinkCancelledResponse|\cashfree\Client\Model\LinkCancelledError, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelPaymentLinkWithHttpInfo($x_client_id, $x_client_secret, $link_id, $x_api_version = '2022-01-01')
    {
        $request = $this->cancelPaymentLinkRequest($x_client_id, $x_client_secret, $link_id, $x_api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\cashfree\Client\Model\CFLinkCancelledResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\cashfree\Client\Model\CFLinkCancelledResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\cashfree\Client\Model\LinkCancelledError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\cashfree\Client\Model\LinkCancelledError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\cashfree\Client\Model\CFLinkCancelledResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cashfree\Client\Model\CFLinkCancelledResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cashfree\Client\Model\LinkCancelledError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelPaymentLinkAsync
     *
     * Cancel Payment Link
     *
     * @param  string $x_client_id (required)
     * @param  string $x_client_secret (required)
     * @param  string $link_id (required)
     * @param  string $x_api_version (optional, default to '2022-01-01')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPaymentLinkAsync($x_client_id, $x_client_secret, $link_id, $x_api_version = '2022-01-01')
    {
        return $this->cancelPaymentLinkAsyncWithHttpInfo($x_client_id, $x_client_secret, $link_id, $x_api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelPaymentLinkAsyncWithHttpInfo
     *
     * Cancel Payment Link
     *
     * @param  string $x_client_id (required)
     * @param  string $x_client_secret (required)
     * @param  string $link_id (required)
     * @param  string $x_api_version (optional, default to '2022-01-01')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPaymentLinkAsyncWithHttpInfo($x_client_id, $x_client_secret, $link_id, $x_api_version = '2022-01-01')
    {
        $returnType = '\cashfree\Client\Model\CFLinkCancelledResponse';
        $request = $this->cancelPaymentLinkRequest($x_client_id, $x_client_secret, $link_id, $x_api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelPaymentLink'
     *
     * @param  string $x_client_id (required)
     * @param  string $x_client_secret (required)
     * @param  string $link_id (required)
     * @param  string $x_api_version (optional, default to '2022-01-01')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelPaymentLinkRequest($x_client_id, $x_client_secret, $link_id, $x_api_version = '2022-01-01')
    {
        // verify the required parameter 'x_client_id' is set
        if ($x_client_id === null || (is_array($x_client_id) && count($x_client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_client_id when calling cancelPaymentLink'
            );
        }
        // verify the required parameter 'x_client_secret' is set
        if ($x_client_secret === null || (is_array($x_client_secret) && count($x_client_secret) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_client_secret when calling cancelPaymentLink'
            );
        }
        // verify the required parameter 'link_id' is set
        if ($link_id === null || (is_array($link_id) && count($link_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $link_id when calling cancelPaymentLink'
            );
        }

        $resourcePath = '/links/{link_id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_client_id !== null) {
            $headerParams['x-client-id'] = ObjectSerializer::toHeaderValue($x_client_id);
        }
        // header params
        if ($x_client_secret !== null) {
            $headerParams['x-client-secret'] = ObjectSerializer::toHeaderValue($x_client_secret);
        }
        // header params
        if ($x_api_version !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($x_api_version);
        }

        // path params
        if ($link_id !== null) {
            $resourcePath = str_replace(
                '{' . 'link_id' . '}',
                ObjectSerializer::toPathValue($link_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPaymentLink
     *
     * Create Payment Link
     *
     * @param  string $x_client_id x_client_id (required)
     * @param  string $x_client_secret x_client_secret (required)
     * @param  string $x_api_version x_api_version (optional, default to '2022-01-01')
     * @param  bool $x_idempotency_replayed x_idempotency_replayed (optional, default to false)
     * @param  string $x_idempotency_key x_idempotency_key (optional)
     * @param  string $x_request_id x_request_id (optional)
     * @param  \cashfree\Client\Model\CFLinkRequest $cf_link_request cf_link_request (optional)
     *
     * @throws \cashfree\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cashfree\Client\Api\CFPaymentLinkResponse
     */
    public function createPaymentLink($x_client_id, $x_client_secret, $x_api_version = '2022-01-01', $x_idempotency_replayed = false, $x_idempotency_key = null, $x_request_id = null, $cf_link_request = null)
    {
        $response = $this->createPaymentLinkWithHttpInfo($x_client_id, $x_client_secret, $x_api_version, $x_idempotency_replayed, $x_idempotency_key, $x_request_id, $cf_link_request);
        list($r) = $response;
        $cfLinkResponse = new CFPaymentLinkResponse($r, $response[2]);
        return $cfLinkResponse;
    }

    /**
     * Operation createPaymentLinkWithHttpInfo
     *
     * Create Payment Link
     *
     * @param  string $x_client_id (required)
     * @param  string $x_client_secret (required)
     * @param  string $x_api_version (optional, default to '2022-01-01')
     * @param  bool $x_idempotency_replayed (optional, default to false)
     * @param  string $x_idempotency_key (optional)
     * @param  string $x_request_id (optional)
     * @param  \cashfree\Client\Model\CFLinkRequest $cf_link_request (optional)
     *
     * @throws \cashfree\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cashfree\Client\Model\CFLink, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentLinkWithHttpInfo($x_client_id, $x_client_secret, $x_api_version = '2022-01-01', $x_idempotency_replayed = false, $x_idempotency_key = null, $x_request_id = null, $cf_link_request = null)
    {
        $request = $this->createPaymentLinkRequest($x_client_id, $x_client_secret, $x_api_version, $x_idempotency_replayed, $x_idempotency_key, $x_request_id, $cf_link_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\cashfree\Client\Model\CFLink' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\cashfree\Client\Model\CFLink', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\cashfree\Client\Model\CFLink';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cashfree\Client\Model\CFLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPaymentLinkAsync
     *
     * Create Payment Link
     *
     * @param  string $x_client_id (required)
     * @param  string $x_client_secret (required)
     * @param  string $x_api_version (optional, default to '2022-01-01')
     * @param  bool $x_idempotency_replayed (optional, default to false)
     * @param  string $x_idempotency_key (optional)
     * @param  string $x_request_id (optional)
     * @param  \cashfree\Client\Model\CFLinkRequest $cf_link_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentLinkAsync($x_client_id, $x_client_secret, $x_api_version = '2022-01-01', $x_idempotency_replayed = false, $x_idempotency_key = null, $x_request_id = null, $cf_link_request = null)
    {
        return $this->createPaymentLinkAsyncWithHttpInfo($x_client_id, $x_client_secret, $x_api_version, $x_idempotency_replayed, $x_idempotency_key, $x_request_id, $cf_link_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentLinkAsyncWithHttpInfo
     *
     * Create Payment Link
     *
     * @param  string $x_client_id (required)
     * @param  string $x_client_secret (required)
     * @param  string $x_api_version (optional, default to '2022-01-01')
     * @param  bool $x_idempotency_replayed (optional, default to false)
     * @param  string $x_idempotency_key (optional)
     * @param  string $x_request_id (optional)
     * @param  \cashfree\Client\Model\CFLinkRequest $cf_link_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentLinkAsyncWithHttpInfo($x_client_id, $x_client_secret, $x_api_version = '2022-01-01', $x_idempotency_replayed = false, $x_idempotency_key = null, $x_request_id = null, $cf_link_request = null)
    {
        $returnType = '\cashfree\Client\Model\CFLink';
        $request = $this->createPaymentLinkRequest($x_client_id, $x_client_secret, $x_api_version, $x_idempotency_replayed, $x_idempotency_key, $x_request_id, $cf_link_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaymentLink'
     *
     * @param  string $x_client_id (required)
     * @param  string $x_client_secret (required)
     * @param  string $x_api_version (optional, default to '2022-01-01')
     * @param  bool $x_idempotency_replayed (optional, default to false)
     * @param  string $x_idempotency_key (optional)
     * @param  string $x_request_id (optional)
     * @param  \cashfree\Client\Model\CFLinkRequest $cf_link_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPaymentLinkRequest($x_client_id, $x_client_secret, $x_api_version = '2022-01-01', $x_idempotency_replayed = false, $x_idempotency_key = null, $x_request_id = null, $cf_link_request = null)
    {
        // verify the required parameter 'x_client_id' is set
        if ($x_client_id === null || (is_array($x_client_id) && count($x_client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_client_id when calling createPaymentLink'
            );
        }
        // verify the required parameter 'x_client_secret' is set
        if ($x_client_secret === null || (is_array($x_client_secret) && count($x_client_secret) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_client_secret when calling createPaymentLink'
            );
        }

        $resourcePath = '/links';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_client_id !== null) {
            $headerParams['x-client-id'] = ObjectSerializer::toHeaderValue($x_client_id);
        }
        // header params
        if ($x_client_secret !== null) {
            $headerParams['x-client-secret'] = ObjectSerializer::toHeaderValue($x_client_secret);
        }
        // header params
        if ($x_api_version !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($x_api_version);
        }
        // header params
        if ($x_idempotency_replayed !== null) {
            $headerParams['x-idempotency-replayed'] = ObjectSerializer::toHeaderValue($x_idempotency_replayed);
        }
        // header params
        if ($x_idempotency_key !== null) {
            $headerParams['x-idempotency-key'] = ObjectSerializer::toHeaderValue($x_idempotency_key);
        }
        // header params
        if ($x_request_id !== null) {
            $headerParams['x-request-id'] = ObjectSerializer::toHeaderValue($x_request_id);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($cf_link_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($cf_link_request));
            } else {
                $httpBody = $cf_link_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentLinkDetails
     *
     * Fetch Payment Link Details
     *
     * @param  string $x_client_id x_client_id (required)
     * @param  string $x_client_secret x_client_secret (required)
     * @param  string $link_id link_id (required)
     * @param  string $x_api_version x_api_version (optional, default to '2022-01-01')
     * @param  bool $x_idempotency_replayed x_idempotency_replayed (optional, default to false)
     * @param  string $x_idempotency_key x_idempotency_key (optional)
     * @param  string $x_request_id x_request_id (optional)
     *
     * @throws \cashfree\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cashfree\Client\Api\CFPaymentLinkResponse
     */
    public function getPaymentLinkDetails($x_client_id, $x_client_secret, $link_id, $x_api_version = '2022-01-01', $x_idempotency_replayed = false, $x_idempotency_key = null, $x_request_id = null)
    {
        $response = $this->getPaymentLinkDetailsWithHttpInfo($x_client_id, $x_client_secret, $link_id, $x_api_version, $x_idempotency_replayed, $x_idempotency_key, $x_request_id);
        list($r) = $response;
        $cfPaymentLinkResponse = new CFPaymentLinkResponse($r, $response[2]);
        return $cfPaymentLinkResponse;
    }

    /**
     * Operation getPaymentLinkDetailsWithHttpInfo
     *
     * Fetch Payment Link Details
     *
     * @param  string $x_client_id (required)
     * @param  string $x_client_secret (required)
     * @param  string $link_id (required)
     * @param  string $x_api_version (optional, default to '2022-01-01')
     * @param  bool $x_idempotency_replayed (optional, default to false)
     * @param  string $x_idempotency_key (optional)
     * @param  string $x_request_id (optional)
     *
     * @throws \cashfree\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cashfree\Client\Model\CFLink, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentLinkDetailsWithHttpInfo($x_client_id, $x_client_secret, $link_id, $x_api_version = '2022-01-01', $x_idempotency_replayed = false, $x_idempotency_key = null, $x_request_id = null)
    {
        $request = $this->getPaymentLinkDetailsRequest($x_client_id, $x_client_secret, $link_id, $x_api_version, $x_idempotency_replayed, $x_idempotency_key, $x_request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\cashfree\Client\Model\CFLink' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\cashfree\Client\Model\CFLink', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\cashfree\Client\Model\CFLink';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cashfree\Client\Model\CFLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentLinkDetailsAsync
     *
     * Fetch Payment Link Details
     *
     * @param  string $x_client_id (required)
     * @param  string $x_client_secret (required)
     * @param  string $link_id (required)
     * @param  string $x_api_version (optional, default to '2022-01-01')
     * @param  bool $x_idempotency_replayed (optional, default to false)
     * @param  string $x_idempotency_key (optional)
     * @param  string $x_request_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentLinkDetailsAsync($x_client_id, $x_client_secret, $link_id, $x_api_version = '2022-01-01', $x_idempotency_replayed = false, $x_idempotency_key = null, $x_request_id = null)
    {
        return $this->getPaymentLinkDetailsAsyncWithHttpInfo($x_client_id, $x_client_secret, $link_id, $x_api_version, $x_idempotency_replayed, $x_idempotency_key, $x_request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentLinkDetailsAsyncWithHttpInfo
     *
     * Fetch Payment Link Details
     *
     * @param  string $x_client_id (required)
     * @param  string $x_client_secret (required)
     * @param  string $link_id (required)
     * @param  string $x_api_version (optional, default to '2022-01-01')
     * @param  bool $x_idempotency_replayed (optional, default to false)
     * @param  string $x_idempotency_key (optional)
     * @param  string $x_request_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentLinkDetailsAsyncWithHttpInfo($x_client_id, $x_client_secret, $link_id, $x_api_version = '2022-01-01', $x_idempotency_replayed = false, $x_idempotency_key = null, $x_request_id = null)
    {
        $returnType = '\cashfree\Client\Model\CFLink';
        $request = $this->getPaymentLinkDetailsRequest($x_client_id, $x_client_secret, $link_id, $x_api_version, $x_idempotency_replayed, $x_idempotency_key, $x_request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentLinkDetails'
     *
     * @param  string $x_client_id (required)
     * @param  string $x_client_secret (required)
     * @param  string $link_id (required)
     * @param  string $x_api_version (optional, default to '2022-01-01')
     * @param  bool $x_idempotency_replayed (optional, default to false)
     * @param  string $x_idempotency_key (optional)
     * @param  string $x_request_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentLinkDetailsRequest($x_client_id, $x_client_secret, $link_id, $x_api_version = '2022-01-01', $x_idempotency_replayed = false, $x_idempotency_key = null, $x_request_id = null)
    {
        // verify the required parameter 'x_client_id' is set
        if ($x_client_id === null || (is_array($x_client_id) && count($x_client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_client_id when calling getPaymentLinkDetails'
            );
        }
        // verify the required parameter 'x_client_secret' is set
        if ($x_client_secret === null || (is_array($x_client_secret) && count($x_client_secret) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_client_secret when calling getPaymentLinkDetails'
            );
        }
        // verify the required parameter 'link_id' is set
        if ($link_id === null || (is_array($link_id) && count($link_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $link_id when calling getPaymentLinkDetails'
            );
        }

        $resourcePath = '/links/{link_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_client_id !== null) {
            $headerParams['x-client-id'] = ObjectSerializer::toHeaderValue($x_client_id);
        }
        // header params
        if ($x_client_secret !== null) {
            $headerParams['x-client-secret'] = ObjectSerializer::toHeaderValue($x_client_secret);
        }
        // header params
        if ($x_api_version !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($x_api_version);
        }
        // header params
        if ($x_idempotency_replayed !== null) {
            $headerParams['x-idempotency-replayed'] = ObjectSerializer::toHeaderValue($x_idempotency_replayed);
        }
        // header params
        if ($x_idempotency_key !== null) {
            $headerParams['x-idempotency-key'] = ObjectSerializer::toHeaderValue($x_idempotency_key);
        }
        // header params
        if ($x_request_id !== null) {
            $headerParams['x-request-id'] = ObjectSerializer::toHeaderValue($x_request_id);
        }

        // path params
        if ($link_id !== null) {
            $resourcePath = str_replace(
                '{' . 'link_id' . '}',
                ObjectSerializer::toPathValue($link_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentLinkOrders
     *
     * Get Orders for a Payment Link
     *
     * @param  string $x_client_id x_client_id (required)
     * @param  string $x_client_secret x_client_secret (required)
     * @param  string $link_id link_id (required)
     * @param  string $x_api_version x_api_version (optional, default to '2022-01-01')
     * @param  bool $x_idempotency_replayed x_idempotency_replayed (optional, default to false)
     * @param  string $x_idempotency_key x_idempotency_key (optional)
     * @param  string $x_request_id x_request_id (optional)
     *
     * @throws \cashfree\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cashfree\Client\Model\CFLinkOrders[]
     */
    public function getPaymentLinkOrders($x_client_id, $x_client_secret, $link_id, $x_api_version = '2022-01-01', $x_idempotency_replayed = false, $x_idempotency_key = null, $x_request_id = null)
    {
        list($response) = $this->getPaymentLinkOrdersWithHttpInfo($x_client_id, $x_client_secret, $link_id, $x_api_version, $x_idempotency_replayed, $x_idempotency_key, $x_request_id);
        return $response;
    }

    /**
     * Operation getPaymentLinkOrdersWithHttpInfo
     *
     * Get Orders for a Payment Link
     *
     * @param  string $x_client_id (required)
     * @param  string $x_client_secret (required)
     * @param  string $link_id (required)
     * @param  string $x_api_version (optional, default to '2022-01-01')
     * @param  bool $x_idempotency_replayed (optional, default to false)
     * @param  string $x_idempotency_key (optional)
     * @param  string $x_request_id (optional)
     *
     * @throws \cashfree\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cashfree\Client\Model\CFLinkOrders[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentLinkOrdersWithHttpInfo($x_client_id, $x_client_secret, $link_id, $x_api_version = '2022-01-01', $x_idempotency_replayed = false, $x_idempotency_key = null, $x_request_id = null)
    {
        $request = $this->getPaymentLinkOrdersRequest($x_client_id, $x_client_secret, $link_id, $x_api_version, $x_idempotency_replayed, $x_idempotency_key, $x_request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\cashfree\Client\Model\CFLinkOrders[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\cashfree\Client\Model\CFLinkOrders[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\cashfree\Client\Model\CFLinkOrders[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cashfree\Client\Model\CFLinkOrders[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentLinkOrdersAsync
     *
     * Get Orders for a Payment Link
     *
     * @param  string $x_client_id (required)
     * @param  string $x_client_secret (required)
     * @param  string $link_id (required)
     * @param  string $x_api_version (optional, default to '2022-01-01')
     * @param  bool $x_idempotency_replayed (optional, default to false)
     * @param  string $x_idempotency_key (optional)
     * @param  string $x_request_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentLinkOrdersAsync($x_client_id, $x_client_secret, $link_id, $x_api_version = '2022-01-01', $x_idempotency_replayed = false, $x_idempotency_key = null, $x_request_id = null)
    {
        return $this->getPaymentLinkOrdersAsyncWithHttpInfo($x_client_id, $x_client_secret, $link_id, $x_api_version, $x_idempotency_replayed, $x_idempotency_key, $x_request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentLinkOrdersAsyncWithHttpInfo
     *
     * Get Orders for a Payment Link
     *
     * @param  string $x_client_id (required)
     * @param  string $x_client_secret (required)
     * @param  string $link_id (required)
     * @param  string $x_api_version (optional, default to '2022-01-01')
     * @param  bool $x_idempotency_replayed (optional, default to false)
     * @param  string $x_idempotency_key (optional)
     * @param  string $x_request_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentLinkOrdersAsyncWithHttpInfo($x_client_id, $x_client_secret, $link_id, $x_api_version = '2022-01-01', $x_idempotency_replayed = false, $x_idempotency_key = null, $x_request_id = null)
    {
        $returnType = '\cashfree\Client\Model\CFLinkOrders[]';
        $request = $this->getPaymentLinkOrdersRequest($x_client_id, $x_client_secret, $link_id, $x_api_version, $x_idempotency_replayed, $x_idempotency_key, $x_request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentLinkOrders'
     *
     * @param  string $x_client_id (required)
     * @param  string $x_client_secret (required)
     * @param  string $link_id (required)
     * @param  string $x_api_version (optional, default to '2022-01-01')
     * @param  bool $x_idempotency_replayed (optional, default to false)
     * @param  string $x_idempotency_key (optional)
     * @param  string $x_request_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentLinkOrdersRequest($x_client_id, $x_client_secret, $link_id, $x_api_version = '2022-01-01', $x_idempotency_replayed = false, $x_idempotency_key = null, $x_request_id = null)
    {
        // verify the required parameter 'x_client_id' is set
        if ($x_client_id === null || (is_array($x_client_id) && count($x_client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_client_id when calling getPaymentLinkOrders'
            );
        }
        // verify the required parameter 'x_client_secret' is set
        if ($x_client_secret === null || (is_array($x_client_secret) && count($x_client_secret) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_client_secret when calling getPaymentLinkOrders'
            );
        }
        // verify the required parameter 'link_id' is set
        if ($link_id === null || (is_array($link_id) && count($link_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $link_id when calling getPaymentLinkOrders'
            );
        }

        $resourcePath = '/links/{link_id}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_client_id !== null) {
            $headerParams['x-client-id'] = ObjectSerializer::toHeaderValue($x_client_id);
        }
        // header params
        if ($x_client_secret !== null) {
            $headerParams['x-client-secret'] = ObjectSerializer::toHeaderValue($x_client_secret);
        }
        // header params
        if ($x_api_version !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($x_api_version);
        }
        // header params
        if ($x_idempotency_replayed !== null) {
            $headerParams['x-idempotency-replayed'] = ObjectSerializer::toHeaderValue($x_idempotency_replayed);
        }
        // header params
        if ($x_idempotency_key !== null) {
            $headerParams['x-idempotency-key'] = ObjectSerializer::toHeaderValue($x_idempotency_key);
        }
        // header params
        if ($x_request_id !== null) {
            $headerParams['x-request-id'] = ObjectSerializer::toHeaderValue($x_request_id);
        }

        // path params
        if ($link_id !== null) {
            $resourcePath = str_replace(
                '{' . 'link_id' . '}',
                ObjectSerializer::toPathValue($link_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
